1. If an interface contains only 1 abstract method that is known as functional interface.(SAM : Single Abstract Method)
2. Four types of functional interface
	- consumer
	- suppliar
	- function
	- predicate
	
3. consumer
	- single parameter no returns
	- @FunctionlInterface
	  public interface Consumer<T>{
	  	void accept(T t);
	  }
	  public class Main{
	  	public static void main(String[] args){
	  		Consumer<Integer>obj=(Integer val)->{
	  			if(val>10){
	  				sopln("logging");
	  			}
	  		};
	  		obj.accept(11);
	  	}
	  }
	  
4. suppliar
	- no parameter result returns
	- @FunctionlInterface
	  public interface Suppliar<T>{
	  	T get();
	  }
	  public class Main{
	  	public static void main(String[] args){
	  		Suppliar<String>obj=()->{
	  			return "logging";
	  		};
	  		String ans=obj.get();
	  		sopln(ans);
	  	}
	  }
	  
5. function
	- single parameter result returns
	- @FunctionlInterface
	  public interface Function<T,R>{
	  	R apply(T t);
	  }
	  public class Main{
	  	public static void main(String[] args){
	  		Function<Integer,String>obj=(Integer val)->{
	  			String output=val.toString();
	  			return output;
	  		};
	  		String ans=obj.apply(12);
	  		sopln(ans);
	  	}
	  }
	  
6. Predicate
	- single parameter boolean returns
	- @FunctionlInterface
	  public interface Predicate<T>{
	  	boolean test(T t);
	  }
	  public class Main{
	  	public static void main(String[] args){
	  		Predicate<Integer>obj=(Integer val)->{
	  			if(val%2==0){
	  				return true;
	  			}else{
	  				return false;
	  			}
	  		};
	  		boolean ans=obj.test(11);
	  		sopln(ans);
	  	}
	  }
	  